-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

REVOKE ALL ON TABLE public.users_and_teams FROM anon;
REVOKE ALL ON TABLE public.users_and_teams FROM authenticated;
REVOKE ALL ON TABLE public.users_and_teams FROM postgres;
REVOKE ALL ON TABLE public.users_and_teams FROM service_role;
REVOKE ALL ON TABLE public.users_and_teams FROM supabase_admin;
GRANT ALL ON TABLE public.users_and_teams TO supabase_admin;

GRANT ALL ON TABLE public.users_and_teams TO authenticated;

GRANT ALL ON TABLE public.users_and_teams TO anon;

GRANT ALL ON TABLE public.users_and_teams TO postgres;

GRANT ALL ON TABLE public.users_and_teams TO service_role;

REVOKE ALL ON TABLE public.username_mappings FROM anon;
REVOKE ALL ON TABLE public.username_mappings FROM postgres;
REVOKE ALL ON TABLE public.username_mappings FROM service_role;
GRANT ALL ON TABLE public.username_mappings TO anon;

GRANT ALL ON TABLE public.username_mappings TO service_role;

GRANT ALL ON TABLE public.username_mappings TO postgres;

REVOKE ALL ON TABLE public.github_integration FROM anon;
REVOKE ALL ON TABLE public.github_integration FROM postgres;
REVOKE ALL ON TABLE public.github_integration FROM service_role;
GRANT ALL ON TABLE public.github_integration TO anon;

GRANT ALL ON TABLE public.github_integration TO service_role;

GRANT ALL ON TABLE public.github_integration TO postgres;

REVOKE ALL ON TABLE public.github_repositories FROM authenticated;
REVOKE ALL ON TABLE public.github_repositories FROM postgres;
REVOKE ALL ON TABLE public.github_repositories FROM service_role;
GRANT ALL ON TABLE public.github_repositories TO authenticated;

GRANT ALL ON TABLE public.github_repositories TO service_role;

GRANT ALL ON TABLE public.github_repositories TO postgres;

ALTER TABLE IF EXISTS public.github_repositories
    ADD COLUMN installation_id bigint;

COMMENT ON COLUMN public.github_repositories.installation_id
    IS 'The ID of the installation that this repo belongs to';
CREATE TRIGGER handle_updated_at_github_repositories
    BEFORE UPDATE 
    ON public.github_repositories
    FOR EACH ROW
    EXECUTE FUNCTION extensions.moddatetime('updated_at');
