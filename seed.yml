compile:
  - pnpm install --frozen-lockfile --prefer-offline

before_deploy:
  # # Sentry token/settings set in environment variables
  # - curl -sL https://sentry.io/get-cli/ | SENTRY_CLI_VERSION="2.14.4" bash
  # # SEED uses dash to execute commands so we have to use bash to do var slicing
  # - sentry-cli releases new $(VAR=$SEED_BUILD_SERVICE_SHA bash -c 'echo ${VAR:0:7}')
  # - sentry-cli releases files $(VAR=$SEED_BUILD_SERVICE_SHA bash -c 'echo ${VAR:0:7}') upload-sourcemaps --ext map --ext mjs  --url-prefix '/var/task/' .sst/cdk.out/asset.*/
  # Remove source maps so they're not bundled with the Lambdas
  - find .sst/cdk.out -type f -name '*.map' -delete

after_deploy:
  # Migrate to latest
  - echo 'export STACK_NAME="${SEED_STAGE_NAME}-review-corral-MainStack"' >> $BASH_ENV
  - echo $STACK_NAME
  - echo "export FUNC_NAME=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`MigrationFunction`].OutputValue | [0]' --output text)" >> $BASH_ENV
  - echo $FUNC_NAME
  # Same timeout as in MigrationFunction
  - >
    aws lambda invoke
    --cli-read-timeout 600
    --cli-connect-timeout 90
    --function-name ${FUNC_NAME}
    --payload '{}'
    response.json
  - cat response.json
  - >
    grep -q '"statusCode":200' response.json ||
    (echo "Error: Lambda function did not return a 200 status code." && exit 1)

  # # Finalize the Sentry release
  # - curl -sL https://sentry.io/get-cli/ | SENTRY_CLI_VERSION="2.14.4" bash
  # - sentry-cli releases finalize $(VAR=$SEED_BUILD_SERVICE_SHA bash -c 'echo ${VAR:0:7}')
